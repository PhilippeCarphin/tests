#+TITLE: Cookies

The code itself does both together and is commented.  Here I show a separated
version of each method since normally we would use the middleware method alone.
Possibly starting with the raw method and upgrading to the middleware method
once we understand how cookies work.

* Doing it raw

The server sets cookies by responding with one or more =Set-Cookie= headers in
the response.  These response headers must follow a certain syntax as described
in the references.

Depending on the attributes of the cookies, when the browser makes requests, it
puts some of these cookies in automatically in the =Cookie= request header.

The cookies in the =Cookie= request header do not contain any attributes, only
=NAME=VALUE= pairs separated by =; =.  The attributes only control which cookies
get sent.

#+begin_src clojure
(ns cookies-demo.core
  (:require [ring.adapter.jetty]
            [compojure.core])
  (:use [clojure.string]))

(defn set-cookie-raw [request]
  {:status 200
   :headers {"Content-Type" "text/html"
             "Set-Cookie" "session=123456; Path=/; Max-Age=84600"}
   :body "<p>I set one cookie named <tt>session</tt></p>"})

(defn cookies-html-table-raw [cookie]
  (let [cookies (map #(clojure.string/split % #"=")
                     (clojure.string/split cookie #"; *"))]
    (str "<table><tr><th>Name</th><th>Value</th></tr>"
         (join "\n" (for [[name value] cookies]
                      (format "<tr><td>%s</td><td style=\"max-width:500px\">%s</td></tr>"
                              name value)))
         "</table>")))

(defn show-cookies-raw [request]
  (let [cookie (get-in request [:headers "cookie"])]
    {:status 200
     :headers {"Content-Type" "text/html"}
     :body (str "<H1>Cookies sent by browser via 'Cookie' header</H1>"
                (cookies-html-table-raw (:cookies request)))}))

(compojure.core/defroutes my-routes
  (compojure.core/GET "/set-cookie-raw" request set-cookie-raw)
  (compojure.core/GET "/show-cookies-raw" request (ring.middleware.cookies/wrap-cookies show-cookies-raw))
  (compojure.core/ANY "*" request {:status 404
                                   :headers {"Content-Type" "text/html"}
                                   :body (str "<H1>Not Found</H1>"
                                              "<p>Routes are /set-cookie-raw,"
                                              "/show-cookies</p>")}))

(defn -main
  "Main function"
  [& args]
  (ring.adapter.jetty/run-jetty my-routes {:port 8989}))
#+end_src

- [[https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cookie][MDN: The =Cookie= header]]
- [[https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie][MDN: The =Set-Cookie= header]]

* Doing it with middleware

The =ring.middleware.cookies/wrap-cookies= preprocesses requests turning the
=Cookie= header into a key =:cookies= in the requests map whose value contains
parsed cookies.

It also processes response maps turning =:cookies {...}= into =Set-Cookie=
headers.

This allows us to send back more than one cookie.  The middleware will turn the
cookies into multiple instances of the =Set-Cookie= header.

#+begin_src clojure
(ns cookies-demo.core
  (:require [ring.adapter.jetty]
            [ring.middleware.cookies]
            [compojure.core])
  (:use [clojure.string]))

(defn set-cookies-middleware [request]
  {:status 200
   :headers {"Content-Type" "text/html"}
   :cookies {"middleware-session" {:value "987654321" :path "/" :max-age 86400}
             "middleware-other" {:value "123456789abcdef" :path "/show-cookies" :max-age 3600}}
   :body "<p>I set two cookies: one named <tt>middleware-session</tt> and one named <tt>middleware-other</tt></p>"})

(defn show-cookies-raw [request]
  (let [cookie (get-in request [:headers "cookie"])]
    {:status 200
     :headers {"Content-Type" "text/html"}
     :body (str "<H1>Cookies sent by browser via 'Cookie' header</H1>"
                (cookies-html-table-raw (:cookies request)))}))

(defn cookies-html-table-middleware [cookies]
  (str "<table><tr><th>Name</th><th>Value</th></tr>"
       (join "\n" (for [[name value] cookies]
                    (format "<tr><td>%s</td><td style=\"max-width:500px\">%s</td></tr>"
                            name (:value value))))
       "</table>"))

(defn show-cookies-middleware [request]
    {:status 200
     :headers {"Content-Type" "text/html"}
     :body (str "<H1>Cookies sent by browser via 'Cookie' header</H1>"
                (cookies-html-table-middleware (:cookies request)))})

(compojure.core/defroutes my-routes
  (compojure.core/GET "/set-cookies-middleware" request
                      (ring.middleware.cookies/wrap-cookies set-cookies-middleware))
  (compojure.core/GET "/show-cookies-middleware" request
                      (ring.middleware.cookies/wrap-cookies show-cookies-middleware))
  (compojure.core/ANY "*" request {:status 404
                                   :headers {"Content-Type" "text/html"}
                                   :body (str "<H1>Not Found</H1>"
                                              "<p>Routes are "
                                              "/set-cookies-middleware, /show-cookies</p>")}))

(defn -main
  "Main function"
  [& args]
  (ring.adapter.jetty/run-jetty my-routes {:port 8989}))
#+end_src

Note that the =:cookies= map contained in requests and the one that we put in
responses are different.  In requests, they only have the cookie's values and in
the responses, we get to set other attributes on the cookies.

- [[https://github.com/ring-clojure/ring/wiki/Cookies][Ring cookies middleware]]
